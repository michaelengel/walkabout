#
# Copyright (C) 2001, Sun Microsystems, Inc
#
# See the file "LICENSE.TERMS" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL
# WARRANTIES.
#
#

# File: sparc.NET.direct/pathfinder-call/profile.inst
# Desc: This file extends the next executing tail to instrument calls aswell to
#		handle recursive procedures and possibly combat long traces.
#
# Updates:
# 01 Aug 01 - David: initial version
# 20 Aug 01 - David: now instruments calls aswell.
# 04 Sep 01 - David: recursive scheme included


DEFINITION

branch [ "BA", "BN", "BNE", "BE", "BG", "BLE", "BGE", "BL",
 	     "BGU", "BLEU", "BCC", "BCS", "BPOS", "BNEG", "BVC", "BVS",
         "BNEA", "BEA", "BGA", "BLEA", "BGEA",
         "BLA", "BGUA", "BLEUA", "BCCA", "BCSA", "BPOSA",
         "BNEGA", "BVCA", "BVSA" ]	
branch label 
{
	int oldpc = SSL(%pc);		
 
 	SSL_INST_SEMANTICS
  
	// check back branches
	if (oldpc > PARAM(label)) {
		if (trace_mode) {
			// regardless of whether back branch is taken, trace ends
			// item 2 of Dynamo's end of trace condition
			// - hot trace can only have one loop
			end_build_trace(oldpc, PARAM(label));
			// end_build_trace(oldpc, SSL(%pc));
		} else {
		
   			// branch is taken
			if (SSL(%npc) == PARAM(label)) {			
 				// check to see if target is in the fragment cache
				map<pair<unsigned,unsigned>, Fragment>::iterator mi = 
					entry_points.find(pair<unsigned,unsigned>(oldpc, PARAM(label)));
 				if (mi == entry_points.end()) {				
 	  				increment_counter(oldpc, PARAM(label), 0);
				} else {
					jump_to_fragment((*mi).second.host_address);
				}
			}
		}
  	}
}

call [ "CALL__" ]
call label
{
	int oldpc = SSL(%pc);		
 	SSL_INST_SEMANTICS  
	if (trace_mode) {
		// trace ends at a back branch or 
		// at a call site if the start of trace is a call itself
		// if (trace_type == 2) {
		//	end_build_trace(oldpc, PARAM(label));
		// }
		
		call_stack++;
		// new rule: trace ends call stack is too high (set to 5)
		if (call_stack >= 5)
			end_build_trace(oldpc, SSL(%npc));		
		
	} else {				
 		// check to see if target is in the fragment cache
		map<pair<unsigned,unsigned>, Fragment>::iterator mi = 
			entry_points.find(pair<unsigned,unsigned>(oldpc, PARAM(label)));
 		if (mi == entry_points.end()) {				
 	  		increment_counter(oldpc, PARAM(label), 2);
		} else {
			jump_to_fragment((*mi).second.host_address);
		}
  	}
}

load  [ "LD", "LDA", "LDD", "LDUH", "LDUHA", "LDUB", "LDUBA", "LDSH", "LDSHA", 
		"LDSB", "LDSBA", "LDF", "LDDF", "LDSTUB"]
load eaddr, reg
{
	if (trace_mode) {
		// monitor the value of eaddr
		// monitor_eaddr(SSL(%pc) - 4, PARAM(eaddr));		
		monitor_eaddr(SSL(%pc), PARAM(eaddr));		
	}
  	SSL_INST_SEMANTICS
}

store [ "STD", "STDA", "ST", "STA", "STH", "STHA", "STB", "STBA", "STDF", 
		"STF", "STDFA", "STFA"]
store reg, eaddr                      
{
	if (trace_mode) {
		// monitor the value of eaddr
		monitor_eaddr(SSL(%pc), PARAM(eaddr));		
	}
  	SSL_INST_SEMANTICS
}

return [ "RET", "RETL" ]
return none
{
	int oldpc = SSL(%pc);		
  	SSL_INST_SEMANTICS
	if (trace_mode) {
		// monitor the value of npc
		monitor_eaddr(oldpc, SSL(%npc));		
		// trace ends at a return if the start of trace is a call itself
		// if (trace_type == 2) {
		//  	end_build_trace(oldpc, SSL(%npc));
		// }
		
		call_stack --;
		// new rule: trace ends call stack is too low (set to -5)
		if (call_stack <= -5)
			end_build_trace(oldpc, SSL(%npc));		
	}
}

indirect_call [ "CALL_" ]
indirect_call eaddr
{
	if (trace_mode) {
		// monitor the value of eaddr
		monitor_eaddr(SSL(%pc), PARAM(eaddr));		
	}
  	SSL_INST_SEMANTICS
}

ijump [ "JMP", "JMPL" ]
ijump eaddr, reg
{
	if (trace_mode) {
		// monitor the value of eaddr
		monitor_eaddr(SSL(%pc), PARAM(eaddr));		
	}
  	SSL_INST_SEMANTICS
}


FETCHEXECUTE
{
	if (trace_mode) {
		add_to_trace(SSL(%pc));		
	}
  	SSL_INST_SEMANTICS
}



INSTRUMENTATION_ROUTINES

#include "sparc.NET.direct.extra.cc"

